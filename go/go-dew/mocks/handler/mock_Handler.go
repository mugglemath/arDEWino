// Code generated by mockery v2.48.0. DO NOT EDIT.

package handler

import (
	gin "github.com/gin-gonic/gin"
	mock "github.com/stretchr/testify/mock"
)

// MockHandler is an autogenerated mock type for the Handler type
type MockHandler struct {
	mock.Mock
}

type MockHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *MockHandler) EXPECT() *MockHandler_Expecter {
	return &MockHandler_Expecter{mock: &_m.Mock}
}

// HandleOutdoorDewpoint provides a mock function with given fields: ctx
func (_m *MockHandler) HandleOutdoorDewpoint(ctx *gin.Context) {
	_m.Called(ctx)
}

// MockHandler_HandleOutdoorDewpoint_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HandleOutdoorDewpoint'
type MockHandler_HandleOutdoorDewpoint_Call struct {
	*mock.Call
}

// HandleOutdoorDewpoint is a helper method to define mock.On call
//   - ctx *gin.Context
func (_e *MockHandler_Expecter) HandleOutdoorDewpoint(ctx interface{}) *MockHandler_HandleOutdoorDewpoint_Call {
	return &MockHandler_HandleOutdoorDewpoint_Call{Call: _e.mock.On("HandleOutdoorDewpoint", ctx)}
}

func (_c *MockHandler_HandleOutdoorDewpoint_Call) Run(run func(ctx *gin.Context)) *MockHandler_HandleOutdoorDewpoint_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gin.Context))
	})
	return _c
}

func (_c *MockHandler_HandleOutdoorDewpoint_Call) Return() *MockHandler_HandleOutdoorDewpoint_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockHandler_HandleOutdoorDewpoint_Call) RunAndReturn(run func(*gin.Context)) *MockHandler_HandleOutdoorDewpoint_Call {
	_c.Call.Return(run)
	return _c
}

// HandleSensorData provides a mock function with given fields: ctx
func (_m *MockHandler) HandleSensorData(ctx *gin.Context) {
	_m.Called(ctx)
}

// MockHandler_HandleSensorData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HandleSensorData'
type MockHandler_HandleSensorData_Call struct {
	*mock.Call
}

// HandleSensorData is a helper method to define mock.On call
//   - ctx *gin.Context
func (_e *MockHandler_Expecter) HandleSensorData(ctx interface{}) *MockHandler_HandleSensorData_Call {
	return &MockHandler_HandleSensorData_Call{Call: _e.mock.On("HandleSensorData", ctx)}
}

func (_c *MockHandler_HandleSensorData_Call) Run(run func(ctx *gin.Context)) *MockHandler_HandleSensorData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gin.Context))
	})
	return _c
}

func (_c *MockHandler_HandleSensorData_Call) Return() *MockHandler_HandleSensorData_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockHandler_HandleSensorData_Call) RunAndReturn(run func(*gin.Context)) *MockHandler_HandleSensorData_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockHandler creates a new instance of MockHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockHandler {
	mock := &MockHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
