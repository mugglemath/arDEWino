// Code generated by mockery v2.48.0. DO NOT EDIT.

package db

import (
	context "context"

	model "github.com/mugglemath/go-dew/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// MockClient is an autogenerated mock type for the Client type
type MockClient struct {
	mock.Mock
}

type MockClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClient) EXPECT() *MockClient_Expecter {
	return &MockClient_Expecter{mock: &_m.Mock}
}

// CheckRecentHumidityAlert provides a mock function with given fields: ctx
func (_m *MockClient) CheckRecentHumidityAlert(ctx context.Context) (bool, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for CheckRecentHumidityAlert")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (bool, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) bool); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_CheckRecentHumidityAlert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckRecentHumidityAlert'
type MockClient_CheckRecentHumidityAlert_Call struct {
	*mock.Call
}

// CheckRecentHumidityAlert is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockClient_Expecter) CheckRecentHumidityAlert(ctx interface{}) *MockClient_CheckRecentHumidityAlert_Call {
	return &MockClient_CheckRecentHumidityAlert_Call{Call: _e.mock.On("CheckRecentHumidityAlert", ctx)}
}

func (_c *MockClient_CheckRecentHumidityAlert_Call) Run(run func(ctx context.Context)) *MockClient_CheckRecentHumidityAlert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockClient_CheckRecentHumidityAlert_Call) Return(_a0 bool, _a1 error) *MockClient_CheckRecentHumidityAlert_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_CheckRecentHumidityAlert_Call) RunAndReturn(run func(context.Context) (bool, error)) *MockClient_CheckRecentHumidityAlert_Call {
	_c.Call.Return(run)
	return _c
}

// GetLastKeepWindowsValue provides a mock function with given fields: ctx
func (_m *MockClient) GetLastKeepWindowsValue(ctx context.Context) (string, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetLastKeepWindowsValue")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (string, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) string); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_GetLastKeepWindowsValue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLastKeepWindowsValue'
type MockClient_GetLastKeepWindowsValue_Call struct {
	*mock.Call
}

// GetLastKeepWindowsValue is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockClient_Expecter) GetLastKeepWindowsValue(ctx interface{}) *MockClient_GetLastKeepWindowsValue_Call {
	return &MockClient_GetLastKeepWindowsValue_Call{Call: _e.mock.On("GetLastKeepWindowsValue", ctx)}
}

func (_c *MockClient_GetLastKeepWindowsValue_Call) Run(run func(ctx context.Context)) *MockClient_GetLastKeepWindowsValue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockClient_GetLastKeepWindowsValue_Call) Return(_a0 string, _a1 error) *MockClient_GetLastKeepWindowsValue_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_GetLastKeepWindowsValue_Call) RunAndReturn(run func(context.Context) (string, error)) *MockClient_GetLastKeepWindowsValue_Call {
	_c.Call.Return(run)
	return _c
}

// InsertSensorFeedData provides a mock function with given fields: ctx, sensorData
func (_m *MockClient) InsertSensorFeedData(ctx context.Context, sensorData model.SensorData) error {
	ret := _m.Called(ctx, sensorData)

	if len(ret) == 0 {
		panic("no return value specified for InsertSensorFeedData")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.SensorData) error); ok {
		r0 = rf(ctx, sensorData)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClient_InsertSensorFeedData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertSensorFeedData'
type MockClient_InsertSensorFeedData_Call struct {
	*mock.Call
}

// InsertSensorFeedData is a helper method to define mock.On call
//   - ctx context.Context
//   - sensorData model.SensorData
func (_e *MockClient_Expecter) InsertSensorFeedData(ctx interface{}, sensorData interface{}) *MockClient_InsertSensorFeedData_Call {
	return &MockClient_InsertSensorFeedData_Call{Call: _e.mock.On("InsertSensorFeedData", ctx, sensorData)}
}

func (_c *MockClient_InsertSensorFeedData_Call) Run(run func(ctx context.Context, sensorData model.SensorData)) *MockClient_InsertSensorFeedData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.SensorData))
	})
	return _c
}

func (_c *MockClient_InsertSensorFeedData_Call) Return(_a0 error) *MockClient_InsertSensorFeedData_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClient_InsertSensorFeedData_Call) RunAndReturn(run func(context.Context, model.SensorData) error) *MockClient_InsertSensorFeedData_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockClient creates a new instance of MockClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClient {
	mock := &MockClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
