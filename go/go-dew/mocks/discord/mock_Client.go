// Code generated by mockery v2.48.0. DO NOT EDIT.

package discord

import (
	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// MockClient is an autogenerated mock type for the Client type
type MockClient struct {
	mock.Mock
}

type MockClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClient) EXPECT() *MockClient_Expecter {
	return &MockClient_Expecter{mock: &_m.Mock}
}

// PanicHandler provides a mock function with given fields: debugStack, req
func (_m *MockClient) PanicHandler(debugStack string, req *http.Request) {
	_m.Called(debugStack, req)
}

// MockClient_PanicHandler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PanicHandler'
type MockClient_PanicHandler_Call struct {
	*mock.Call
}

// PanicHandler is a helper method to define mock.On call
//   - debugStack string
//   - req *http.Request
func (_e *MockClient_Expecter) PanicHandler(debugStack interface{}, req interface{}) *MockClient_PanicHandler_Call {
	return &MockClient_PanicHandler_Call{Call: _e.mock.On("PanicHandler", debugStack, req)}
}

func (_c *MockClient_PanicHandler_Call) Run(run func(debugStack string, req *http.Request)) *MockClient_PanicHandler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(*http.Request))
	})
	return _c
}

func (_c *MockClient_PanicHandler_Call) Return() *MockClient_PanicHandler_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockClient_PanicHandler_Call) RunAndReturn(run func(string, *http.Request)) *MockClient_PanicHandler_Call {
	_c.Call.Return(run)
	return _c
}

// SendHumidityAlert provides a mock function with given fields: message
func (_m *MockClient) SendHumidityAlert(message string) error {
	ret := _m.Called(message)

	if len(ret) == 0 {
		panic("no return value specified for SendHumidityAlert")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClient_SendHumidityAlert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendHumidityAlert'
type MockClient_SendHumidityAlert_Call struct {
	*mock.Call
}

// SendHumidityAlert is a helper method to define mock.On call
//   - message string
func (_e *MockClient_Expecter) SendHumidityAlert(message interface{}) *MockClient_SendHumidityAlert_Call {
	return &MockClient_SendHumidityAlert_Call{Call: _e.mock.On("SendHumidityAlert", message)}
}

func (_c *MockClient_SendHumidityAlert_Call) Run(run func(message string)) *MockClient_SendHumidityAlert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockClient_SendHumidityAlert_Call) Return(_a0 error) *MockClient_SendHumidityAlert_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClient_SendHumidityAlert_Call) RunAndReturn(run func(string) error) *MockClient_SendHumidityAlert_Call {
	_c.Call.Return(run)
	return _c
}

// SendSensorFeed provides a mock function with given fields: message
func (_m *MockClient) SendSensorFeed(message string) error {
	ret := _m.Called(message)

	if len(ret) == 0 {
		panic("no return value specified for SendSensorFeed")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClient_SendSensorFeed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendSensorFeed'
type MockClient_SendSensorFeed_Call struct {
	*mock.Call
}

// SendSensorFeed is a helper method to define mock.On call
//   - message string
func (_e *MockClient_Expecter) SendSensorFeed(message interface{}) *MockClient_SendSensorFeed_Call {
	return &MockClient_SendSensorFeed_Call{Call: _e.mock.On("SendSensorFeed", message)}
}

func (_c *MockClient_SendSensorFeed_Call) Run(run func(message string)) *MockClient_SendSensorFeed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockClient_SendSensorFeed_Call) Return(_a0 error) *MockClient_SendSensorFeed_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClient_SendSensorFeed_Call) RunAndReturn(run func(string) error) *MockClient_SendSensorFeed_Call {
	_c.Call.Return(run)
	return _c
}

// SendWindowAlert provides a mock function with given fields: message
func (_m *MockClient) SendWindowAlert(message string) error {
	ret := _m.Called(message)

	if len(ret) == 0 {
		panic("no return value specified for SendWindowAlert")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClient_SendWindowAlert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendWindowAlert'
type MockClient_SendWindowAlert_Call struct {
	*mock.Call
}

// SendWindowAlert is a helper method to define mock.On call
//   - message string
func (_e *MockClient_Expecter) SendWindowAlert(message interface{}) *MockClient_SendWindowAlert_Call {
	return &MockClient_SendWindowAlert_Call{Call: _e.mock.On("SendWindowAlert", message)}
}

func (_c *MockClient_SendWindowAlert_Call) Run(run func(message string)) *MockClient_SendWindowAlert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockClient_SendWindowAlert_Call) Return(_a0 error) *MockClient_SendWindowAlert_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClient_SendWindowAlert_Call) RunAndReturn(run func(string) error) *MockClient_SendWindowAlert_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockClient creates a new instance of MockClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClient {
	mock := &MockClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
